parameters:
- name: checkoutRepo
  type: string
  default: 'self'
- name: checkoutRef
  type: string
  default: ''
- name: aptPackages
  type: object
  default:
    - python3-pip
    - python3-protobuf
    - cmake
    - ninja-build
    - libprotobuf-dev
    - libprotoc-dev
    - protobuf-compiler
    - liblmdb-dev
    - pkg-config
    - ffmpeg
    - libavcodec-dev
    - libavformat-dev
    - libavutil-dev
    - libswscale-dev
    - libturbojpeg-dev
    - libjpeg-turbo-official=3.0.2-20240124
    - libopencv-dev
- name: pipModules
  type: object
  default:
    - numpy
    - opencv-python
    - torch
    - pillow
- name: rocmDependencies
  type: object
  default:
    - rocm-cmake
    - llvm-project
    - ROCR-Runtime
    - clr
    - rocDecode
    - half
    - rpp
    - MIVisionX
    - aomp

jobs:
- job: rocAL
  variables:
  - group: common
  - template: /.azuredevops/variables-global.yml
  pool:
    vmImage: ${{ variables.BASE_BUILD_POOL }}
  workspace:
    clean: all
  steps:
  - task: Bash@3
    displayName: 'Register libjpeg-turbo packages'
    inputs:
      targetType: inline
      script: |
        sudo mkdir --parents --mode=0755 /etc/apt/keyrings
        wget -q -O- https://packagecloud.io/dcommander/libjpeg-turbo/gpgkey | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/libjpeg-turbo.gpg > /dev/null
        echo "deb [signed-by=/etc/apt/trusted.gpg.d/libjpeg-turbo.gpg] https://packagecloud.io/dcommander/libjpeg-turbo/any/ any main" | sudo tee /etc/apt/sources.list.d/libjpeg-turbo.list
        sudo apt update
        apt-cache show libjpeg-turbo-official | grep Version
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/dependencies-other.yml
    parameters:
      aptPackages: ${{ parameters.aptPackages }}
      pipModules: ${{ parameters.pipModules }}
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/preamble.yml
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/checkout.yml
    parameters:
      checkoutRepo: ${{ parameters.checkoutRepo }}
  - task: Bash@3
    displayName: 'Clone PyBind11'
    inputs:
      targetType: inline
      script: git clone --depth 1 -b v2.11.1 https://github.com/pybind/pybind11
      workingDirectory: '$(Build.SourcesDirectory)'
  - task: Bash@3
    displayName: 'Clone RapidJSON'
    inputs:
      targetType: inline
      script: git clone --depth 1 https://github.com/Tencent/rapidjson.git
      workingDirectory: '$(Build.SourcesDirectory)'
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/build-cmake.yml
    parameters:
      componentName: PyBind11
      cmakeBuildDir: '$(Build.SourcesDirectory)/pybind11/build'
      customInstallPath: false
      installEnabled: false
      extraBuildFlags: >-
        -DDOWNLOAD_CATCH=ON
        -DDOWNLOAD_EIGEN=ON
        -GNinja
  - task: Bash@3
    displayName: 'Install PyBind11'
    inputs:
      targetType: inline
      script: sudo cmake --build . --target install
      workingDirectory: '$(Build.SourcesDirectory)/pybind11/build'
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/build-cmake.yml
    parameters:
      componentName: RapidJSON
      cmakeBuildDir: '$(Build.SourcesDirectory)/rapidjson/build'
      customInstallPath: false
      installEnabled: false
      extraBuildFlags: >-
        -GNinja
  - task: Bash@3
    displayName: 'Install RapidJSON'
    inputs:
      targetType: inline
      script: sudo cmake --build . --target install
      workingDirectory: '$(Build.SourcesDirectory)/rapidjson/build'
  # CI case: download latest default branch build
  - ${{ if eq(parameters.checkoutRef, '') }}:
    - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/dependencies-rocm.yml
      parameters:
        dependencyList: ${{ parameters.rocmDependencies }}
        dependencySource: staging
  # manual build case: triggered by ROCm/ROCm repo
  - ${{ if ne(parameters.checkoutRef, '') }}:
    - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/dependencies-rocm.yml
      parameters:
        dependencyList: ${{ parameters.rocmDependencies }}
        dependencySource: tag-builds
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/build-cmake.yml
    parameters:
      extraBuildFlags: >-
        -DROCM_PATH=$(Agent.BuildDirectory)/rocm
        -DCMAKE_PREFIX_PATH=$(Agent.BuildDirectory)/rocm;/opt/libjpeg-turbo
        -DCMAKE_INSTALL_PREFIX_PYTHON=$Python3_STDARCH
        -DCMAKE_BUILD_TYPE=Release
        -GNinja
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-upload.yml
