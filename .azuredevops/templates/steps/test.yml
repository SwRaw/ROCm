parameters:
- name: componentName
  type: string
  default: ''
- name: testDir
  type: string
  default: 'build'
- name: testExecutable
  type: string
  default: 'ctest'
- name: testParameters
  type: string
  default: '-VV --output-on-failure --force-new-ctest-process --output-junit test_output.xml'
- name: testOutputFile
  type: string
  default: test_output.xml
- name: testOutputFormat
  type: string
  default: 'JUnit'
  values:
    - JUnit
    - NUnit
    - VSTest
    - XUnit
    - CTest
- name: testPublishResults
  type: boolean
  default: true
- name: allowPartiallySucceededBuilds
  type: object
  default:
    - amdsmi
    - aomp
    - HIPIFY
    - MIVisionX
    - rocm-cmake
    - rocm_smi_lib
    - roctracer

steps:
# run test, continue on failure to publish results
# and to publish build artifacts
- task: Bash@3
  displayName: '${{ parameters.componentName }} Test'
  continueOnError: ${{ containsValue(parameters.allowPartiallySucceededBuilds, parameters.componentName) }}
  inputs:
    targetType: inline
    script: ${{ parameters.testExecutable }} ${{ parameters.testParameters }}
    workingDirectory: ${{ parameters.testDir }}
- ${{ if parameters.testPublishResults }}:
  - task: PublishTestResults@2
    displayName: '${{ parameters.componentName }} Publish Results'
    condition: succeededOrFailed()
    inputs:
      searchFolder: ${{ parameters.testDir }}
      testResultsFormat: ${{ parameters.testOutputFormat }}
      testResultsFiles: '**/${{ parameters.testOutputFile }}'
