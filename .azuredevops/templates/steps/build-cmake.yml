parameters:
- name: componentName
  type: string
  default: ''
- name: extraBuildFlags
  type: string
  default: ''
- name: multithreadFlag
  type: string
  default: ''
- name: cmakeBuildDir
  type: string
  default: 'build'
- name: cmakeSourceDir
  type: string
  default: '..'
- name: cmakeTarget
  type: string
  default: 'install'
- name: cmakeTargetDir
  type: string
  default: '.'
- name: installDir
  type: string
  default: '$(Build.BinariesDirectory)'
- name: customInstallPath
  type: boolean
  default: true
- name: installEnabled
  type: boolean
  default: true

steps:
# create workingDirectory if it does not exist and change into it
# call cmake from within that directory using $cmakeArgs as its parameters
- task: CMake@1
  displayName: '${{parameters.componentName }} CMake Flags'
  inputs:
    workingDirectory: ${{ parameters.cmakeBuildDir }}
    ${{ if eq(parameters.customInstallPath, true) }}:
      cmakeArgs: -DCMAKE_INSTALL_PREFIX=${{ parameters.installDir }} ${{ parameters.extraBuildFlags }} ${{ parameters.cmakeSourceDir }}
    ${{ else }}:
      cmakeArgs: ${{ parameters.extraBuildFlags }} ..
- script: df -h
  displayName: Disk space before build
# equivalent to running make $cmakeTargetDir from $cmakeBuildDir
# i.e., cd $cmakeBuildDir; make $cmakeTargetDir
- task: CMake@1
  displayName: '${{parameters.componentName }} Build'
  inputs:
    workingDirectory: ${{ parameters.cmakeBuildDir }}
    cmakeArgs: '--build ${{ parameters.cmakeTargetDir }} ${{ parameters.multithreadFlag }}'
    retryCountOnTaskFailure: 10
- script: df -h
  displayName: Disk space after build
# equivalent to running make $cmakeTarget from $cmakeBuildDir
# e.g., make install
- ${{ if eq(parameters.installEnabled, true) }}:
  - task: CMake@1
    displayName: '${{parameters.componentName }} ${{ parameters.cmakeTarget }}'
    inputs:
      workingDirectory: ${{ parameters.cmakeBuildDir }}
      cmakeArgs: '--build ${{ parameters.cmakeTargetDir }} --target ${{ parameters.cmakeTarget }}'
